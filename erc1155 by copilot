// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

// Import OpenZeppelin's ERC1155 implementation and Ownable contract.
// Celo is EVM-compatible, so standard ERC1155 contracts work out-of-the-box.
import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract RC1155Minter is ERC1155, Ownable {
    // Optionally, you can keep track of current token IDs
    uint256 public currentTokenId = 0;

    // Mapping from token ID to supply (optional, OpenZeppelin tracks balances by default)
    mapping(uint256 => uint256) public tokenSupply;

    // Metadata URI, e.g., "https://example.com/api/token/{id}.json"
    constructor(string memory _uri) ERC1155(_uri) {}

    /**
     * @dev Mint a new ERC1155 token.
     * @param amount Number of tokens to mint
     * @param data Additional data (can be empty)
     * @return tokenId The newly minted token ID
     */
    function mint(uint256 amount, bytes memory data) external onlyOwner returns (uint256 tokenId) {
        tokenId = ++currentTokenId;
        _mint(msg.sender, tokenId, amount, data);
        tokenSupply[tokenId] = amount;
    }

    /**
     * @dev Mint existing token ID to a user
     * @param to Address to mint to
     * @param tokenId Token ID to mint
     * @param amount Amount to mint
     * @param data Additional data (can be empty)
     */
    function mintTo(address to, uint256 tokenId, uint256 amount, bytes memory data) external onlyOwner {
        require(tokenId <= currentTokenId, "Token ID does not exist");
        _mint(to, tokenId, amount, data);
        tokenSupply[tokenId] += amount;
    }

    /**
     * @dev Set a new URI for all tokens
     * @param newuri New URI string
     */
    function setURI(string memory newuri) external onlyOwner {
        _setURI(newuri);
    }
}
